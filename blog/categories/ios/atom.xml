<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ios | Alpine Blog]]></title>
  <link href="http://githubdelegate.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://githubdelegate.github.io/"/>
  <updated>2016-05-18T15:09:14+08:00</updated>
  <id>http://githubdelegate.github.io/</id>
  <author>
    <name><![CDATA[zy]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[UIView在执行动画过程中如何响应点击事件]]></title>
    <link href="http://githubdelegate.github.io/blog/2016/05/16/uiviewzai-zhi-xing-dong-hua-guo-cheng-zhong-ru-he-xiang-ying-dian-ji-shi-jian/"/>
    <updated>2016-05-16T20:32:50+08:00</updated>
    <id>http://githubdelegate.github.io/blog/2016/05/16/uiviewzai-zhi-xing-dong-hua-guo-cheng-zhong-ru-he-xiang-ying-dian-ji-shi-jian</id>
    <content type="html"><![CDATA[<h1>UIView在执行动画过程中如何响应事件</h1>

<p>先看代码</p>

<pre><code>
- (void)viewDidLoad {
    [super viewDidLoad];

    UIButton *btn = [[UIButton alloc] initWithFrame:CGRectMake(100, 100, 100, 40)];
    self.btn = btn;
    [btn addTarget:self action:@selector(btnClick) forControlEvents:UIControlEventTouchUpInside];
    btn.backgroundColor = [UIColor greenColor];
    [self.view addSubview:btn];

}
- (void)touchesBegan:(NSSet&lt;UITouch *&gt; *)touches withEvent:(UIEvent *)event{
    [UIView animateWithDuration:15 delay:0 options:UIViewAnimationCurveLinear | UIViewAnimationOptionAllowUserInteraction animations:^{
         self.btn.frame = CGRectMake(300, 100, 100, 40);
    } completion:^(BOOL finished) {

    }];
}
</code></pre>

<p>上面是一段很简单的动画代码，问题是在btn做动画，移动过程中，btn不能响应点击事件了。这是因为其实btn 接受事件的区域已经移动到300的位置，你点击300会发现触发了点击事件。实际的动画过程就是<code>.layer.presentationLayer</code>在做，就是你能看到的移动过程实际上是<code>.layer.presentationLayer</code>.所以要判断要想在动画过程中响应点击事件就需要判断手指点击的点是不是在<code>.layer.presentationLayer</code>上，使用UIView方法 <code>hitTest:withEvent:</code>方法，这个方法会返回一个View，就是在当前View的层级结构中找到一个最合适的View来处理事件。
    大概的过程就是先调用<code>pointInside:withEvent:</code>方法，判断触摸点是不是在当前View中，若返回NO,表示触摸点不在当前View上，<code>hitTest:withEvent:</code>方法返回nil；若返回YES，表示触摸点在当前View内，然后从subviews数组中<code>尾部向前遍历</code>,每个子View同样执行这两个方法，直到有子视图的hitTest:withEvent:方法返回非空对象或者全部子视图遍历完毕。▷ 若第一次有子视图的hitTest:withEvent:方法返回非空对象,则当前视图的hitTest:withEvent:方法就返回此对象，处理结束
▷ 若所有子视图的hitTest:withEvent:方法都返回nil，则当前视图的hitTest:withEvent:方法返回当前视图自身(self)
• 最终，这个触摸事件交给主窗口的hitTest:withEvent:方法返回的视图对象去处理。</p>

<p>现在考虑为什么使用<code>layer.presentationLayer</code>,这个可以看<a href="http://objccn.io/issue-12-1/">动画解释</a>,</p>

<pre><code>    if ([self.layer.presentationLayer hitTest:touchedPoint]){
        CGPoint newPoint = [self.layer.presentationLayer convertPoint:touchedPoint fromLayer:self.superview.layer];
        NSLog(@"得到新的点=%@",NSStringFromCGPoint(newPoint));
        if (newPoint.x &gt; 0 &amp;&amp; newPoint.x &lt; 35) {
            if (self.bulletViewHeadImageTappedBlock) {
                self.bulletViewHeadImageTappedBlock(self.infoDict);
            }
            return YES;
        }
    }
</code></pre>

<p>看这段代码，<code>hitTest:touchedPoint</code>有返回值表示点击点在self.layer.presentationLayer范围内，然后就是转换坐标系把点击点转换到<code>self.layer.presentationLayer</code>坐标系里面，就可以判断具体点击在哪个视图上了。</p>

<p>注意：</p>

<ol>
<li>使用这种方法要把View的userInteractionEnabled=NO.</li>
<li>如果View中如果有Button，也要把Button的userInteractionEnabled = NO.</li>
</ol>


<h2><code>hitTest</code>进一步研究</h2>

<pre><code>    // testview 禁止用户交互
    testView *view = [[testView alloc] init];
    self.tv = view;
    self.tv.userInteractionEnabled = NO;
    [self.view addSubview:view];


 // testView 内部实现
@implementation testView

- (instancetype)initWithFrame:(CGRect)frame{
    if (self = [super initWithFrame:frame]) {

        _label = [[UILabel alloc] init];
        _label.backgroundColor = [UIColor redColor];
        [self addSubview:_label];

        _btn = [[UIButton alloc] init];
        [_btn setBackgroundColor:[UIColor yellowColor]];
        [_btn addTarget:self action:@selector(btnClick) forControlEvents:UIControlEventTouchUpInside];
        [self addSubview:_btn];

        _imageView = [[UIImageView alloc] init];
        [_imageView setBackgroundColor:[UIColor purpleColor]];
        _imageView.userInteractionEnabled = YES;
        [self addSubview:_imageView];

        UITapGestureRecognizer *tapges= [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(imageTapped)];
        [_imageView addGestureRecognizer:tapges];

        _kbv = [[keyboardView alloc] init];
        _kbv.backgroundColor = [UIColor darkGrayColor];
        [self addSubview:_kbv];

        self.backgroundColor = [UIColor blueColor];
    }
    return self;
}

- (void)imageTapped{
    NSLog(@"--method = %s--current thread:%@",__func__,[NSThread currentThread]);
}

// 这个方法返回imageView
- (UIView *)hitTest:(CGPoint)point w- ithEvent:(UIEvent *)event{
    NSLog(@"--method = %s--current thread:%@",__func__,[NSThread currentThread]);
    return _imageView;
}
</code></pre>

<p>打印输出：</p>

<pre><code>2016-05-17 22:09:06.793 AutoTest[2527:707374] --method = -[testView hitTest:withEvent:]--current thread:&lt;NSThread: 0x13560bf50&gt;{number = 1, name = main}
2016-05-17 22:09:06.794 AutoTest[2527:707374] --method = -[testView hitTest:withEvent:]--current thread:&lt;NSThread: 0x13560bf50&gt;{number = 1, name = main}
2016-05-17 22:09:10.615 AutoTest[2527:707374] --method = -[testView imageTapped]--current thread:&lt;NSThread: 0x13560bf50&gt;{number = 1, name = main}
</code></pre>

<p>从打印结果可以看到行了 <code>hitTest</code>方法执行了两边，然后还是执行了<code>imageView</code>的点击事件。至于为什么会执行两边<code>hitTest</code>方法，还没弄明白原因。</p>

<h2>CALayer</h2>

<blockquote><p><a href="http://xiongzenghuidegithub.github.io/blog/2015/08/18/layerxue-xi-zong-jie/">CALayer总结</a>
<a href="http://blog.handy.wang/blog/2015/10/11/uiviewyu-calayerzhong-dong-hua-de-chuang-jian-he-zhi-xing-guo-cheng/">UIView与CALayer中动画的创建和执行过程</a>
未完待续</p>

<p><a href="http://www.superqq.com/blog/2015/04/23/iosyong-hu-dian-ji-shi-jian-chu-li/">http://www.superqq.com/blog/2015/04/23/iosyong-hu-dian-ji-shi-jian-chu-li/</a></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在.mm文件中调用一个C函数]]></title>
    <link href="http://githubdelegate.github.io/blog/2015/11/06/crcjian-yan-fang-zai-viewcontroller/"/>
    <updated>2015-11-06T14:25:59+08:00</updated>
    <id>http://githubdelegate.github.io/blog/2015/11/06/crcjian-yan-fang-zai-viewcontroller</id>
    <content type="html"><![CDATA[<p>在项目中使用crc进行校验，在网上找到一份c的源码，但是放到项目当中一直编译失败，提示找不到对应的函数
一开始是认为是传递的参数不对，发现不是这个问题,<code>viewController.mm</code>中是用OC++编译的，导致编译不过，但是不明白原因，现在的解决办法是把这c函数放到<code>.m</code>的文件中编译就可以了。</p>

<hr />

<p>原因分析：原因是由于<code>ViewController.mm</code>是<code>.mm</code>后缀的，会按照OC++编译,所以在<code>ViewController.mm</code> 调用<code>int add(int a,int b)</code>函数，在链接阶段,就会去目标文件中去找<code>_add_int_int</code>这样的符号,不同的编译器可能会不同，但是C函数编译后生成的符号是<code>_int</code>，这就导致找不到对应的函数，编译失败,解决办法在C头文件中添加<code>extern "C"</code>，即可。详细解释，开下面的连接博客。</p>

<blockquote><p><a href="http://www.cnblogs.com/skynet/archive/2010/07/10/1774964.html">http://www.cnblogs.com/skynet/archive/2010/07/10/1774964.html</a>
<a href="http://www.jianshu.com/p/5d2eeeb93590">http://www.jianshu.com/p/5d2eeeb93590</a></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS8 framework动态库遇到的问题]]></title>
    <link href="http://githubdelegate.github.io/blog/2015/09/08/ios8chuang-jian-frameworkyu-dao-de-wen-ti/"/>
    <updated>2015-09-08T14:32:29+08:00</updated>
    <id>http://githubdelegate.github.io/blog/2015/09/08/ios8chuang-jian-frameworkyu-dao-de-wen-ti</id>
    <content type="html"><![CDATA[<ol>
<li><p>编译显示<code>Include of non-modular header inside framework module</code> 错误</p>

<p>  修改<code>Build Setting</code> 中<code>Allow Non-modular Include InFramework Modules</code> 为YES.</p></li>
<li><p>在代码中引用头文件 <code>#import "***Kit.h"</code> 提示找不到</p>

<p> 这个时候要检查对应的framework target <code>Build Phases-&gt;Headers-&gt;Public</code> 是否包含对应的类。一般要提供给其他target使用的类的.h文件都应该放到Public中.</p></li>
</ol>

]]></content>
  </entry>
  
</feed>
