<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Alpine Blog]]></title>
  <link href="http://githubdelegate.github.io/atom.xml" rel="self"/>
  <link href="http://githubdelegate.github.io/"/>
  <updated>2015-11-18T14:44:45+08:00</updated>
  <id>http://githubdelegate.github.io/</id>
  <author>
    <name><![CDATA[zy]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS UDP发广播,接收,TCP监听]]></title>
    <link href="http://githubdelegate.github.io/blog/2015/11/18/iosudpfa-yan-bo-hou-jian-li-tcplian-jie/"/>
    <updated>2015-11-18T11:30:45+08:00</updated>
    <id>http://githubdelegate.github.io/blog/2015/11/18/iosudpfa-yan-bo-hou-jian-li-tcplian-jie</id>
    <content type="html"><![CDATA[<p>iOS 手机端先发送UDP广播，硬件设备端收到后，建立TCP连接，然后手机端读取硬件设备发送的信息。</p>

<hr />

<p>1.UDP广播</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>- (void)viewDidAppear:(BOOL)animated
</span><span class='line'>{
</span><span class='line'>    [super viewDidAppear:animated];
</span><span class='line'>    
</span><span class='line'>     // 1.开始发送udp
</span><span class='line'>    [self setupUdpClient];
</span><span class='line'>    
</span><span class='line'>    // 2.开启定时器，每个一秒发送一次
</span><span class='line'>    self.sendTimer = [NSTimer scheduledTimerWithTimeInterval:1 target:self selector:@selector(p_sendUdp) userInfo:nil repeats:YES];
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (void)setupUdpClient
</span><span class='line'>{
</span><span class='line'>    NSError *error;
</span><span class='line'>    _sendUdp = [[AsyncUdpSocket alloc] initWithDelegate:self];
</span><span class='line'>    [_sendUdp enableBroadcast:YES error:&error]; // 开启广播
</span><span class='line'>    if (![self checkError:error]) {
</span><span class='line'>        return;
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>    [_sendUdp bindToPort:9997 error:&error]; // 绑定端口
</span><span class='line'>    if (![self checkError:error]) {
</span><span class='line'>        return;
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (BOOL)p_sendUdp
</span><span class='line'>{
</span><span class='line'>    NSString *sendStr = [NSString stringWithFormat:@"{\"ip\":\"\%@\"}",[Helper getIPAddress]]; // 发送本机IP地址
</span><span class='line'>    NSData *sendData = [sendStr dataUsingEncoding:NSUTF8StringEncoding];
</span><span class='line'>   return [_sendUdp sendData:sendData toHost:USCSoundBoxSendHost port:9998 withTimeout:-1 tag:0];
</span><span class='line'>}
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<hr />

<p>2.UDP接收</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (void)beginReceive
</span><span class='line'>{
</span><span class='line'>    NSError *error;
</span><span class='line'>    _receiveUdp = [[AsyncUdpSocket alloc] initWithDelegate:self];
</span><span class='line'>    [_receiveUdp enableBroadcast:YES error:&error];
</span><span class='line'>    [_receiveUdp bindToPort:9997 error:&error];
</span><span class='line'>    // 开始接受udp数据
</span><span class='line'>    [_receiveUdp receiveWithTimeout:-1 tag:0];
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>// 当收到udp数据包时就会调用，但是你经常会收到不是自己想要的数据包，这些数据包可能来着其他主机，你需要忽略掉这些，这个代理方法返回bool类型，如果返回NO,当收到其他数据包，就会继续调用这个代理方法。
</span><span class='line'>- (BOOL)onUdpSocket:(AsyncUdpSocket *)sock didReceiveData:(NSData *)data withTag:(long)tag fromHost:(NSString *)host port:(UInt16)port
</span><span class='line'>{
</span><span class='line'>    return NO;
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>2.TCP 监听连接请求</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> // 开始监听 
</span><span class='line'> self.asyServer = [[AsyncSocket alloc]initWithDelegate:self];
</span><span class='line'> if([self.asyServer acceptOnPort:9997 error:&error]){
</span><span class='line'>       NSLog(@"开始监听端口。。。%d",USCSoundBoxClientPort);
</span><span class='line'> }else{
</span><span class='line'>     NSLog(@"errr=%@",error);
</span><span class='line'> }
</span><span class='line'>    
</span><span class='line'>
</span><span class='line'>// 建立连接，读取数据   
</span><span class='line'>- (void)onSocket:(AsyncSocket *)sock didAcceptNewSocket:(AsyncSocket *)newSocket
</span><span class='line'>{
</span><span class='line'>    NSLog(@"%@",[NSString stringWithFormat:@"建立与%@的连接",newSocket.connectedHost]);
</span><span class='line'>    self.acceptedSocket = newSocket;
</span><span class='line'>    [newSocket readDataWithTimeout:-1 tag:0];
</span><span class='line'>    newSocket.delegate = self;
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<h3>注意</h3>

<p>1.如果同时开启udp接收和tcp监听的话，tcp监听会失效。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[c++ oc 混编遇到的编译提示NSObjcRuntime error]]></title>
    <link href="http://githubdelegate.github.io/blog/2015/11/13/c-plus-plus-oc-hun-bian-yu-dao-de-bian-yi-ti-shi-nsobjcruntime-error/"/>
    <updated>2015-11-13T13:46:33+08:00</updated>
    <id>http://githubdelegate.github.io/blog/2015/11/13/c-plus-plus-oc-hun-bian-yu-dao-de-bian-yi-ti-shi-nsobjcruntime-error</id>
    <content type="html"><![CDATA[<p> OC 和C++混编时遇到编译错误会提示</p>

<blockquote><p><a href="http://blog.csdn.net/xuchaovip/article/details/22046115"> C++、Objective-c混编陷阱之–错误的头文件引用</a></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CoreBluetooth 相关]]></title>
    <link href="http://githubdelegate.github.io/blog/2015/11/12/corebluetooth-xiang-guan/"/>
    <updated>2015-11-12T12:04:22+08:00</updated>
    <id>http://githubdelegate.github.io/blog/2015/11/12/corebluetooth-xiang-guan</id>
    <content type="html"><![CDATA[<ol>
<li></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在.mm文件中调用一个C函数]]></title>
    <link href="http://githubdelegate.github.io/blog/2015/11/06/crcjian-yan-fang-zai-viewcontroller/"/>
    <updated>2015-11-06T14:25:59+08:00</updated>
    <id>http://githubdelegate.github.io/blog/2015/11/06/crcjian-yan-fang-zai-viewcontroller</id>
    <content type="html"><![CDATA[<p>在项目中使用crc进行校验，在网上找到一份c的源码，但是放到项目当中一直编译失败，提示找不到对应的函数
一开始是认为是传递的参数不对，发现不是这个问题,<code>viewController.mm</code>中是用OC++编译的，导致编译不过，但是不明白原因，现在的解决办法是把这c函数放到<code>.m</code>的文件中编译就可以了。</p>

<hr />

<p>原因分析：原因是由于<code>ViewController.mm</code>是<code>.mm</code>后缀的，会按照OC++编译,所以在<code>ViewController.mm</code> 调用<code>int add(int a,int b)</code>函数，在链接阶段,就会去目标文件中去找<code>_add_int_int</code>这样的符号,不同的编译器可能会不同，但是C函数编译后生成的符号是<code>_int</code>，这就导致找不到对应的函数，编译失败,解决办法在C头文件中添加<code>extern "C"</code>，即可。详细解释，开下面的连接博客。</p>

<blockquote><p><a href="http://www.cnblogs.com/skynet/archive/2010/07/10/1774964.html">http://www.cnblogs.com/skynet/archive/2010/07/10/1774964.html</a>
<a href="http://www.jianshu.com/p/5d2eeeb93590">http://www.jianshu.com/p/5d2eeeb93590</a></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Audiosession Category Qie Huan]]></title>
    <link href="http://githubdelegate.github.io/blog/2015/11/05/audiosession-category-qie-huan/"/>
    <updated>2015-11-05T00:00:00+08:00</updated>
    <id>http://githubdelegate.github.io/blog/2015/11/05/audiosession-category-qie-huan</id>
    <content type="html"><![CDATA[<p>在项目中遇到的问题是，使用<code>AudioQueue</code> 录音，进行语音识别，识别结束后，播报识别结果，但是录音还要继续，遇到的问题是播放的时候声音很小。原因是由于录音的时候设置了</p>

<pre><code>[[AVAudioSession sharedInstance] setCategory:AVAudioSessionCategoryPlayAndRecord error:nil];
</code></pre>

<p>这样设置之后，默认播放rout是听筒，而不是扬声器，声音就小了。
修改方法如下
方法一：</p>

<pre><code>[[AVAudioSession sharedInstance] setCategory:AVAudioSessionCategoryPlayAndRecord withOptions:AVAudioSessionCategoryOptionDefaultToSpeaker | AVAudioSessionCategoryOptionAllowBluetooth error:nil];
</code></pre>

<p>方法二：</p>

<pre><code>[session overrideOutputAudioPort:AVAudioSessionPortOverrideSpeaker error:&amp;error];
</code></pre>

<p>这两个方法的区别可以看这里<a href="https://developer.apple.com/library/ios/qa/qa1754/_index.html">AVAudioSessionCategoryOptionDefaultToSpeaker和AVAudioSessionPortOverrideSpeaker区别</a>，大概意思就是设置<code>AVAudioSessionPortOverrideSpeaker</code> 是临时性的，如果rout改变和audioSession被中断的话，这个设置就失效了，会返回到默认的设置。设置<code>AVAudioSessionCategoryOptionDefaultToSpeaker</code> 后，会一直生效。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS8 framework动态库遇到的问题]]></title>
    <link href="http://githubdelegate.github.io/blog/2015/09/08/ios8chuang-jian-frameworkyu-dao-de-wen-ti/"/>
    <updated>2015-09-08T14:32:29+08:00</updated>
    <id>http://githubdelegate.github.io/blog/2015/09/08/ios8chuang-jian-frameworkyu-dao-de-wen-ti</id>
    <content type="html"><![CDATA[<ol>
<li><p>编译显示<code>Include of non-modular header inside framework module</code> 错误</p>

<p>  修改<code>Build Setting</code> 中<code>Allow Non-modular Include InFramework Modules</code> 为YES.</p></li>
<li><p>在代码中引用头文件 <code>#import "***Kit.h"</code> 提示找不到</p>

<p> 这个时候要检查对应的framework target <code>Build Phases-&gt;Headers-&gt;Public</code> 是否包含对应的类。一般要提供给其他target使用的类的.h文件都应该放到Public中.</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS使用AudioQueue录音遇到的内存泄露问题]]></title>
    <link href="http://githubdelegate.github.io/blog/2015/08/04/ios-nei-cun/"/>
    <updated>2015-08-04T00:15:17+08:00</updated>
    <id>http://githubdelegate.github.io/blog/2015/08/04/ios-nei-cun</id>
    <content type="html"><![CDATA[<h3>AudioQueue 录音</h3>

<p><code>AudioQueue</code> 是iOS中比较底层的音频处理类，可以用来播放和录音。录音的话，每个一段时间都会通过一个C的回掉函数返回录音数据。如下面的代码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// 回调函数
</span><span class='line'>void inputBufferHandler(void *inUserData, AudioQueueRef inAQ, AudioQueueBufferRef inBuffer, const AudioTimeStamp *inStartTime,
</span><span class='line'>                        UInt32 inNumPackets, const AudioStreamPacketDescription *inPacketDesc)
</span><span class='line'>{
</span><span class='line'>    Recorder *recorder = (__bridge Recorder *)inUserData;
</span><span class='line'>    if (recorder == nil){
</span><span class='line'>        return;
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>    if ((inNumPackets &gt; 0) && (recorder.isRecording))
</span><span class='line'>    {
</span><span class='line'>         // 获取录音数据
</span><span class='line'>        int _pcmSize = inBuffer-&gt;mAudioDataByteSize;
</span><span class='line'>        char *_pcmData = (char *)inBuffer-&gt;mAudioData;
</span><span class='line'>      
</span><span class='line'>        NSData *data = [[NSData alloc] initWithBytes:_pcmData length:_pcmSize];
</span><span class='line'>        // 把录音数据传递出去
</span><span class='line'>        [recorder writeRecordingData:data];
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<hr />

<p>上面这段代码有问题，如果一直不停的录音，会发现内存一直不停的增加，而且每次增加的大小会和每次返回的录音数据大小相等。
那导致这段代码内存泄露的原因，就是<code>NSData *data = [[NSData alloc] initWithBytes:_pcmData length:_pcmSize];</code> 这段代码中<code>data</code> 没有释放导致的。虽然是在ARC环境下，但是这是个C函数，要自己管理内存，所以加上<code>@autorelease</code> 就能解决。</p>

<hr />

<blockquote><p>引用
<a href="http://memo.tv/archive/memory_management_with_objective_c_cocoa_iphone">Memory Management with Objective C / Cocoa / iPhone </a></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress搭建博客中遇到的问题]]></title>
    <link href="http://githubdelegate.github.io/blog/2015/07/24/blog/"/>
    <updated>2015-07-24T00:15:17+08:00</updated>
    <id>http://githubdelegate.github.io/blog/2015/07/24/blog</id>
    <content type="html"><![CDATA[<ul>
<li><p><code>gem install **</code> 提示安装失败</p>

<ul>
<li><p>修改gem source<br/>
<code>gem sources -a https://ruby.taobao.org/</code> 添加
<code>gem sources -r https://rubygems.org/</code> 删除原来的</p></li>
<li><p>如果使用<code>bundle install</code> 的时候，安装失败，需要修Gemfile
<code>修改Gemfile 中 source 为https://ruby.taobao.org/</code></p></li>
</ul>
</li>
<li><p>使用<code>zsh</code> 遇到 <code>rake new_post[“title”]</code>  提示 <code>zsh: no matches found: new_post[...]</code></p>

<ul>
<li>修改~/.zshrc文件 添加 <code>alias rake="noglob rake"</code></li>
</ul>
</li>
</ul>


<hr />

<p>相关blog</p>

<ol>
<li><a href="http://www.tuicool.com/articles/Av6fqu">http://www.tuicool.com/articles/Av6fqu</a></li>
<li><a href="http://glgjing.github.io/blog/2014/12/06/li-yong-octopresshe-githubda-jian-ge-ren-bo-ke-(%5B%3F%5D-):ji-chu-huan-jing-da-jian/">http://glgjing.github.io/blog/2014/12/06/li-yong-octopresshe-githubda-jian-ge-ren-bo-ke-(%5B%3F%5D-):ji-chu-huan-jing-da-jian/</a></li>
</ol>

]]></content>
  </entry>
  
</feed>
